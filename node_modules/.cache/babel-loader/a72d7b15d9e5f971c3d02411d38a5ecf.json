{"ast":null,"code":"import _slicedToArray from \"/home/cyogian/practiceJS/React.js/seasons/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/cyogian/practiceJS/React.js/seasons/src/index.js\";\nimport \"./index.css\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Loader from \"./Loader\"; // Hooks based App Component\n\nconst App = () => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        lat = _useState2[0],\n        setLat = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        long = _useState4[0],\n        setLong = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errorMessage = _useState6[0],\n        setErrorMessage = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        address = _useState8[0],\n        setAddress = _useState8[1];\n\n  const appCode = \"7RPWqLqKW0C5u3XQSKrohw\";\n  const appId = \"wkVafqaAkhcWml7qHCyo\";\n  useEffect(() => {\n    window.navigator.geolocation.getCurrentPosition(position => {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n      fetch(\"https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?app_id=\".concat(appId, \"&app_code=\").concat(appCode, \"&mode=retrieveAddresses&prox=\").concat(position.coords.latitude, \",\").concat(position.coords.longitude)).then(response => {\n        return response.json();\n      }).then(myJson => {\n        let address = myJson.Response.View[0].Result[0].Location.Address;\n        setAddress(\"\".concat(address.City, \", \").concat(address.State, \", \").concat(address.Country));\n      });\n    }, err => setErrorMessage(err.message));\n  }, []);\n\n  const helperFunc = () => {\n    if (errorMessage && !lat) {\n      return React.createElement(\"div\", {\n        className: \"ui loc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui negative message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Oops! \" + errorMessage)));\n    }\n\n    if (!errorMessage && !lat) {\n      return React.createElement(Loader, {\n        message: \"Please accept the location request!\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"loc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"pre\", {\n      className: \"loc-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Latitude:\"), \" \", lat, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Longitude:\"), \" \", long, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Address:\"), \" \", address)), React.createElement(SeasonDisplay, {\n      lat: lat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  };\n\n  return helperFunc();\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}), document.querySelector(\"#root\")); // Class Based App Component\n// class App extends React.Component {\n//   state = {\n//     lat: null,\n//     long: null,\n//     address: null,\n//     appCode: \"7RPWqLqKW0C5u3XQSKrohw\",\n//     appId: \"wkVafqaAkhcWml7qHCyo\",\n//     errorMessage: null\n//   };\n//   componentDidMount() {\n//     window.navigator.geolocation.getCurrentPosition(\n//       position => {\n//         this.setState({\n//           lat: position.coords.latitude,\n//           long: position.coords.longitude\n//         });\n//         fetch(\n//           `https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?app_id=${this.state.appId}&app_code=${this.state.appCode}&mode=retrieveAddresses&prox=${this.state.lat},${this.state.long}`\n//         )\n//           .then(response => {\n//             return response.json();\n//           })\n//           .then(myJson => {\n//             let address = myJson.Response.View[0].Result[0].Location.Address;\n//             this.setState({\n//               address: `${address.City}, ${address.State}, ${address.Country}`\n//             });\n//           });\n//       },\n//       err => this.setState({ errorMessage: err.message })\n//     );\n//   }\n//   helperFunc() {\n//     if (this.state.errorMessage && !this.state.lat) {\n//       return (\n//         <div className=\"ui loc\">\n//           <div className=\"ui negative message\">\n//             <div className=\"header\">{\"Oops! \" + this.state.errorMessage}</div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     if (!this.state.errorMessage && !this.state.lat) {\n//       return <Loader message=\"Please accept the location request!\" />;\n//     }\n//     return (\n//       <div>\n//         <div className=\"loc\">\n//           <pre className=\"loc-details\">\n//             <strong>Latitude:</strong> {this.state.lat}\n//             <br />\n//             <strong>Longitude:</strong> {this.state.long}\n//             <br />\n//             <strong>Address:</strong> {this.state.address}\n//           </pre>\n//         </div>\n//         <SeasonDisplay lat={this.state.lat} />\n//       </div>\n//     );\n//   }\n//   render() {\n//     return this.helperFunc();\n//   }\n// }","map":{"version":3,"sources":["/home/cyogian/practiceJS/React.js/seasons/src/index.js"],"names":["React","useState","useEffect","ReactDOM","SeasonDisplay","Loader","App","lat","setLat","long","setLong","errorMessage","setErrorMessage","address","setAddress","appCode","appId","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","response","json","myJson","Response","View","Result","Location","Address","City","State","Country","err","message","helperFunc","render","document","querySelector"],"mappings":";;AAAA,OAAO,aAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACML,QAAQ,CAAC,IAAD,CADd;AAAA;AAAA,QACTM,GADS;AAAA,QACJC,MADI;;AAAA,qBAEQP,QAAQ,CAAC,IAAD,CAFhB;AAAA;AAAA,QAETQ,IAFS;AAAA,QAEHC,OAFG;;AAAA,qBAGwBT,QAAQ,CAAC,IAAD,CAHhC;AAAA;AAAA,QAGTU,YAHS;AAAA,QAGKC,eAHL;;AAAA,qBAIcX,QAAQ,CAAC,IAAD,CAJtB;AAAA;AAAA,QAITY,OAJS;AAAA,QAIAC,UAJA;;AAKhB,QAAMC,OAAO,GAAG,wBAAhB;AACA,QAAMC,KAAK,GAAG,sBAAd;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACEC,QAAQ,IAAI;AACVb,MAAAA,MAAM,CAACa,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,CAAN;AACAb,MAAAA,OAAO,CAACW,QAAQ,CAACC,MAAT,CAAgBE,SAAjB,CAAP;AACAC,MAAAA,KAAK,gFACqET,KADrE,uBACuFD,OADvF,0CAC8HM,QAAQ,CAACC,MAAT,CAAgBC,QAD9I,cAC0JF,QAAQ,CAACC,MAAT,CAAgBE,SAD1K,EAAL,CAGGE,IAHH,CAGQC,QAAQ,IAAI;AAChB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OALH,EAMGF,IANH,CAMQG,MAAM,IAAI;AACd,YAAIhB,OAAO,GAAGgB,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqB,CAArB,EAAwBC,MAAxB,CAA+B,CAA/B,EAAkCC,QAAlC,CAA2CC,OAAzD;AACApB,QAAAA,UAAU,WAAID,OAAO,CAACsB,IAAZ,eAAqBtB,OAAO,CAACuB,KAA7B,eAAuCvB,OAAO,CAACwB,OAA/C,EAAV;AACD,OATH;AAUD,KAdH,EAeEC,GAAG,IAAI1B,eAAe,CAAC0B,GAAG,CAACC,OAAL,CAfxB;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAI7B,YAAY,IAAI,CAACJ,GAArB,EAA0B;AACxB,aACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyB,WAAWI,YAApC,CADF,CADF,CADF;AAOD;;AACD,QAAI,CAACA,YAAD,IAAiB,CAACJ,GAAtB,EAA2B;AACzB,aAAO,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,qCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,OAC8BA,GAD9B,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,OAG+BE,IAH/B,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,OAK6BI,OAL7B,CADF,CADF,EAUE,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAEN,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAcD,GA5BD;;AA6BA,SAAOiC,UAAU,EAAjB;AACD,CA1DD;;AA4DArC,QAAQ,CAACsC,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB,E,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import \"./index.css\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Loader from \"./Loader\";\n\n// Hooks based App Component\nconst App = () => {\n  const [lat, setLat] = useState(null);\n  const [long, setLong] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [address, setAddress] = useState(null);\n  const appCode = \"7RPWqLqKW0C5u3XQSKrohw\";\n  const appId = \"wkVafqaAkhcWml7qHCyo\";\n\n  useEffect(() => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n        fetch(\n          `https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?app_id=${appId}&app_code=${appCode}&mode=retrieveAddresses&prox=${position.coords.latitude},${position.coords.longitude}`\n        )\n          .then(response => {\n            return response.json();\n          })\n          .then(myJson => {\n            let address = myJson.Response.View[0].Result[0].Location.Address;\n            setAddress(`${address.City}, ${address.State}, ${address.Country}`);\n          });\n      },\n      err => setErrorMessage(err.message)\n    );\n  }, []);\n\n  const helperFunc = () => {\n    if (errorMessage && !lat) {\n      return (\n        <div className=\"ui loc\">\n          <div className=\"ui negative message\">\n            <div className=\"header\">{\"Oops! \" + errorMessage}</div>\n          </div>\n        </div>\n      );\n    }\n    if (!errorMessage && !lat) {\n      return <Loader message=\"Please accept the location request!\" />;\n    }\n\n    return (\n      <div>\n        <div className=\"loc\">\n          <pre className=\"loc-details\">\n            <strong>Latitude:</strong> {lat}\n            <br />\n            <strong>Longitude:</strong> {long}\n            <br />\n            <strong>Address:</strong> {address}\n          </pre>\n        </div>\n        <SeasonDisplay lat={lat} />\n      </div>\n    );\n  };\n  return helperFunc();\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\n// Class Based App Component\n\n// class App extends React.Component {\n//   state = {\n//     lat: null,\n//     long: null,\n//     address: null,\n//     appCode: \"7RPWqLqKW0C5u3XQSKrohw\",\n//     appId: \"wkVafqaAkhcWml7qHCyo\",\n//     errorMessage: null\n//   };\n\n//   componentDidMount() {\n//     window.navigator.geolocation.getCurrentPosition(\n//       position => {\n//         this.setState({\n//           lat: position.coords.latitude,\n//           long: position.coords.longitude\n//         });\n//         fetch(\n//           `https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?app_id=${this.state.appId}&app_code=${this.state.appCode}&mode=retrieveAddresses&prox=${this.state.lat},${this.state.long}`\n//         )\n//           .then(response => {\n//             return response.json();\n//           })\n//           .then(myJson => {\n//             let address = myJson.Response.View[0].Result[0].Location.Address;\n//             this.setState({\n//               address: `${address.City}, ${address.State}, ${address.Country}`\n//             });\n//           });\n//       },\n//       err => this.setState({ errorMessage: err.message })\n//     );\n//   }\n\n//   helperFunc() {\n//     if (this.state.errorMessage && !this.state.lat) {\n//       return (\n//         <div className=\"ui loc\">\n//           <div className=\"ui negative message\">\n//             <div className=\"header\">{\"Oops! \" + this.state.errorMessage}</div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     if (!this.state.errorMessage && !this.state.lat) {\n//       return <Loader message=\"Please accept the location request!\" />;\n//     }\n\n//     return (\n//       <div>\n//         <div className=\"loc\">\n//           <pre className=\"loc-details\">\n//             <strong>Latitude:</strong> {this.state.lat}\n//             <br />\n//             <strong>Longitude:</strong> {this.state.long}\n//             <br />\n//             <strong>Address:</strong> {this.state.address}\n//           </pre>\n//         </div>\n//         <SeasonDisplay lat={this.state.lat} />\n//       </div>\n//     );\n//   }\n\n//   render() {\n//     return this.helperFunc();\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}