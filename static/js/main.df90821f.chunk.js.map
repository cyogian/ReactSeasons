{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","changeBackground","document","querySelector","setAttribute","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","ReactDOM","render","useState","setLat","long","setLong","errorMessage","setErrorMessage","address","setAddress","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","response","json","myJson","Response","View","Result","Location","Address","City","State","Country","err"],"mappings":"0OAEMA,G,MAAe,CACjBC,OAAY,CACRC,KAAY,uBACZC,SAAgB,aAChBC,iBAAmB,WACfC,SAASC,cAAc,SAASC,aAAa,QAAS,YAG9DC,OAAY,CACRN,KAAY,qBACZC,SAAgB,iBAChBC,iBAAmB,WACfC,SAASC,cAAc,SAASC,aAAa,QAAS,cAyBnDE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASWD,EAAMC,KATZC,GASiB,IAAIE,MAAOC,YARpC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAGJ,EAEJX,EAAaa,GAA/BV,EAFsB,EAEtBA,SAAUD,EAFY,EAEZA,KAEjB,OADAF,EAAaa,GAAQT,mBAEjB,yBAAKY,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,iCAA4Bb,KACxC,4BAAMD,GACN,uBAAGc,UAAS,kCAA6Bb,OChC/Cc,EAAS,SAAAP,GACb,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBACb,4BAAKN,EAAMQ,YAMnBD,EAAOE,aAAe,CACpBD,QAAS,cAGID,QCmDfG,IAASC,OAAO,kBA5DJ,WAAO,IAAD,EACMC,mBAAS,MADf,mBACTX,EADS,KACJY,EADI,OAEQD,mBAAS,MAFjB,mBAETE,EAFS,KAEHC,EAFG,OAGwBH,mBAAS,MAHjC,mBAGTI,EAHS,KAGKC,EAHL,OAIcL,mBAAS,MAJvB,mBAITM,EAJS,KAIAC,EAJA,KAQhBC,oBAAU,WACRC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GACEZ,EAAOY,EAASC,OAAOC,UACvBZ,EAAQU,EAASC,OAAOE,WACxBC,MAAM,wEAAD,OAPG,uBAOH,qBARK,yBAQL,wCAC8HJ,EAASC,OAAOC,SAD9I,YAC0JF,EAASC,OAAOE,YAE5KE,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJ,IAAIf,EAAUe,EAAOC,SAASC,KAAK,GAAGC,OAAO,GAAGC,SAASC,QACzDnB,EAAW,GAAD,OAAID,EAAQqB,KAAZ,aAAqBrB,EAAQsB,MAA7B,aAAuCtB,EAAQuB,aAG/D,SAAAC,GAAG,OAAIzB,EAAgByB,EAAIlC,YAE5B,IA+BH,OA5BMQ,IAAiBf,EAEjB,yBAAKK,UAAU,UACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UAAU,SAAWU,KAKvCA,GAAiBf,EAKpB,6BACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,eACb,6CADF,IAC8BL,EAC5B,6BACA,8CAHF,IAG+Ba,EAC7B,6BACA,4CALF,IAK6BI,IAG/B,kBAAC,EAAD,CAAejB,IAAKA,KAdf,kBAAC,EAAD,CAAQO,QAAQ,yCAqBb,MAASb,SAASC,cAAc,Y","file":"static/js/main.df90821f.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\nconst seasonConfig = {\n    summer  :   {\n        text    :   \"Let's hit the Beach!\",\n        iconName    :   \"sun yellow\",\n        changeBackground : () => {\n            document.querySelector(\"#root\").setAttribute(\"class\", \"summer\");\n        }\n    },\n    winter  :   {\n        text    :   \"Burr, it's chilly!\",\n        iconName    :   \"snowflake blue\",\n        changeBackground : () => {\n            document.querySelector(\"#root\").setAttribute(\"class\", \"winter\");\n        }\n    }\n};\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return (lat > 0 ? \"summer\" : \"winter\");\n    }\n    else {\n        return (lat > 0 ? \"winter\" : \"summer\");\n    }\n};\nconst SeasonDisplay = (props) => {\n    const season  = getSeason(props.lat, new Date().getMonth());\n    const {iconName, text} = seasonConfig[season];\n    seasonConfig[season].changeBackground();\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive icon ${iconName}`}></i>\n            <h1>{ text }</h1>\n            <i className={`icon-right massive icon ${iconName}`}></i>\n        </div>\n    );\n};\n\nexport default SeasonDisplay;","import React from \"react\";\n\nconst Loader = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">\n        <h3>{props.message}</h3>\n      </div>\n    </div>\n  );\n};\n\nLoader.defaultProps = {\n  message: \"Loading...\"\n};\n\nexport default Loader;\n","import \"./index.css\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Loader from \"./Loader\";\n\n// Hooks based App Component\nconst App = () => {\n  const [lat, setLat] = useState(null);\n  const [long, setLong] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [address, setAddress] = useState(null);\n  const appCode = \"7RPWqLqKW0C5u3XQSKrohw\";\n  const appId = \"wkVafqaAkhcWml7qHCyo\";\n\n  useEffect(() => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n        fetch(\n          `https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?app_id=${appId}&app_code=${appCode}&mode=retrieveAddresses&prox=${position.coords.latitude},${position.coords.longitude}`\n        )\n          .then(response => {\n            return response.json();\n          })\n          .then(myJson => {\n            let address = myJson.Response.View[0].Result[0].Location.Address;\n            setAddress(`${address.City}, ${address.State}, ${address.Country}`);\n          });\n      },\n      err => setErrorMessage(err.message)\n    );\n  }, []);\n\n  const helperFunc = () => {\n    if (errorMessage && !lat) {\n      return (\n        <div className=\"ui loc\">\n          <div className=\"ui negative message\">\n            <div className=\"header\">{\"Oops! \" + errorMessage}</div>\n          </div>\n        </div>\n      );\n    }\n    if (!errorMessage && !lat) {\n      return <Loader message=\"Please accept the location request!\" />;\n    }\n\n    return (\n      <div>\n        <div className=\"loc\">\n          <pre className=\"loc-details\">\n            <strong>Latitude:</strong> {lat}\n            <br />\n            <strong>Longitude:</strong> {long}\n            <br />\n            <strong>Address:</strong> {address}\n          </pre>\n        </div>\n        <SeasonDisplay lat={lat} />\n      </div>\n    );\n  };\n  return helperFunc();\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\n// Class Based App Component\n\n// class App extends React.Component {\n//   state = {\n//     lat: null,\n//     long: null,\n//     address: null,\n//     appCode: \"7RPWqLqKW0C5u3XQSKrohw\",\n//     appId: \"wkVafqaAkhcWml7qHCyo\",\n//     errorMessage: null\n//   };\n\n//   componentDidMount() {\n//     window.navigator.geolocation.getCurrentPosition(\n//       position => {\n//         this.setState({\n//           lat: position.coords.latitude,\n//           long: position.coords.longitude\n//         });\n//         fetch(\n//           `https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?app_id=${this.state.appId}&app_code=${this.state.appCode}&mode=retrieveAddresses&prox=${this.state.lat},${this.state.long}`\n//         )\n//           .then(response => {\n//             return response.json();\n//           })\n//           .then(myJson => {\n//             let address = myJson.Response.View[0].Result[0].Location.Address;\n//             this.setState({\n//               address: `${address.City}, ${address.State}, ${address.Country}`\n//             });\n//           });\n//       },\n//       err => this.setState({ errorMessage: err.message })\n//     );\n//   }\n\n//   helperFunc() {\n//     if (this.state.errorMessage && !this.state.lat) {\n//       return (\n//         <div className=\"ui loc\">\n//           <div className=\"ui negative message\">\n//             <div className=\"header\">{\"Oops! \" + this.state.errorMessage}</div>\n//           </div>\n//         </div>\n//       );\n//     }\n//     if (!this.state.errorMessage && !this.state.lat) {\n//       return <Loader message=\"Please accept the location request!\" />;\n//     }\n\n//     return (\n//       <div>\n//         <div className=\"loc\">\n//           <pre className=\"loc-details\">\n//             <strong>Latitude:</strong> {this.state.lat}\n//             <br />\n//             <strong>Longitude:</strong> {this.state.long}\n//             <br />\n//             <strong>Address:</strong> {this.state.address}\n//           </pre>\n//         </div>\n//         <SeasonDisplay lat={this.state.lat} />\n//       </div>\n//     );\n//   }\n\n//   render() {\n//     return this.helperFunc();\n//   }\n// }\n"],"sourceRoot":""}